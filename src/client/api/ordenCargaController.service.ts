/**
 * Sistema de gestión de órdenes de carga de gas líquido - IW3
 * API para gestionar órdenes de carga de gas líquido. Esto serealiza creando una orden de carga, adjuntando datos como el preset, tara, etc,a la orden de carga. Finalmente se cierra la orden de carga, la cual puedeser consultada en el futuro. Cada orden de carga pasa por 4 estados: E1, E2, E3 y E4. Se utilizó una dependencia llamada Lombok que ayudó bastante a la hora de hacer getters y setters, constructores y autowired. <strong> IMPLEMENTADO POR PACHA, LEONEL Y CANO, ELIANA </strong>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { OrdenDeCarga } from '../model/ordenDeCarga';
import { RequestDelPesoFinal } from '../model/requestDelPesoFinal';
import { RequestDelPesoInicial } from '../model/requestDelPesoInicial';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class OrdenCargaControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adjuntar dato a una orden de carga
     * 
     * @param caudal caudal
     * @param densidad densidad
     * @param masaAcumulada masaAcumulada
     * @param numeroOrden numeroOrden
     * @param password password
     * @param temperatura temperatura
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adjuntarDatoCargaUsingPUT(caudal: number, densidad: number, masaAcumulada: number, numeroOrden: number, password: number, temperatura: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public adjuntarDatoCargaUsingPUT(caudal: number, densidad: number, masaAcumulada: number, numeroOrden: number, password: number, temperatura: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public adjuntarDatoCargaUsingPUT(caudal: number, densidad: number, masaAcumulada: number, numeroOrden: number, password: number, temperatura: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public adjuntarDatoCargaUsingPUT(caudal: number, densidad: number, masaAcumulada: number, numeroOrden: number, password: number, temperatura: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caudal === null || caudal === undefined) {
            throw new Error('Required parameter caudal was null or undefined when calling adjuntarDatoCargaUsingPUT.');
        }

        if (densidad === null || densidad === undefined) {
            throw new Error('Required parameter densidad was null or undefined when calling adjuntarDatoCargaUsingPUT.');
        }

        if (masaAcumulada === null || masaAcumulada === undefined) {
            throw new Error('Required parameter masaAcumulada was null or undefined when calling adjuntarDatoCargaUsingPUT.');
        }

        if (numeroOrden === null || numeroOrden === undefined) {
            throw new Error('Required parameter numeroOrden was null or undefined when calling adjuntarDatoCargaUsingPUT.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling adjuntarDatoCargaUsingPUT.');
        }

        if (temperatura === null || temperatura === undefined) {
            throw new Error('Required parameter temperatura was null or undefined when calling adjuntarDatoCargaUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (caudal !== undefined && caudal !== null) {
            queryParameters = queryParameters.set('caudal', <any>caudal);
        }
        if (densidad !== undefined && densidad !== null) {
            queryParameters = queryParameters.set('densidad', <any>densidad);
        }
        if (masaAcumulada !== undefined && masaAcumulada !== null) {
            queryParameters = queryParameters.set('masaAcumulada', <any>masaAcumulada);
        }
        if (numeroOrden !== undefined && numeroOrden !== null) {
            queryParameters = queryParameters.set('numeroOrden', <any>numeroOrden);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }
        if (temperatura !== undefined && temperatura !== null) {
            queryParameters = queryParameters.set('temperatura', <any>temperatura);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<string>(`${this.basePath}/api/v1/ordenes-carga/carga`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adjuntar peso final a la orden de carga
     * 
     * @param pesoFinalRequest pesoFinalRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adjuntarPesoFinalUsingPUT(pesoFinalRequest: RequestDelPesoFinal, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public adjuntarPesoFinalUsingPUT(pesoFinalRequest: RequestDelPesoFinal, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public adjuntarPesoFinalUsingPUT(pesoFinalRequest: RequestDelPesoFinal, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public adjuntarPesoFinalUsingPUT(pesoFinalRequest: RequestDelPesoFinal, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pesoFinalRequest === null || pesoFinalRequest === undefined) {
            throw new Error('Required parameter pesoFinalRequest was null or undefined when calling adjuntarPesoFinalUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<string>(`${this.basePath}/api/v1/ordenes-carga/peso-final`,
            pesoFinalRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adjuntar tara a una orden de carga
     * 
     * @param pesoInicialRequest pesoInicialRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adjuntarTaraUsingPUT(pesoInicialRequest: RequestDelPesoInicial, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public adjuntarTaraUsingPUT(pesoInicialRequest: RequestDelPesoInicial, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public adjuntarTaraUsingPUT(pesoInicialRequest: RequestDelPesoInicial, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public adjuntarTaraUsingPUT(pesoInicialRequest: RequestDelPesoInicial, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pesoInicialRequest === null || pesoInicialRequest === undefined) {
            throw new Error('Required parameter pesoInicialRequest was null or undefined when calling adjuntarTaraUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<string>(`${this.basePath}/api/v1/ordenes-carga/tara`,
            pesoInicialRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cambiar frecuencia de carga de una orden de carga
     * 
     * @param frecuencia frecuencia
     * @param numOrden numOrden
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cambiarFrecuenciaUsingPUT(frecuencia: number, numOrden: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public cambiarFrecuenciaUsingPUT(frecuencia: number, numOrden: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public cambiarFrecuenciaUsingPUT(frecuencia: number, numOrden: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public cambiarFrecuenciaUsingPUT(frecuencia: number, numOrden: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (frecuencia === null || frecuencia === undefined) {
            throw new Error('Required parameter frecuencia was null or undefined when calling cambiarFrecuenciaUsingPUT.');
        }

        if (numOrden === null || numOrden === undefined) {
            throw new Error('Required parameter numOrden was null or undefined when calling cambiarFrecuenciaUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (frecuencia !== undefined && frecuencia !== null) {
            queryParameters = queryParameters.set('frecuencia', <any>frecuencia);
        }
        if (numOrden !== undefined && numOrden !== null) {
            queryParameters = queryParameters.set('numOrden', <any>numOrden);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<string>(`${this.basePath}/api/v1/ordenes-carga/cambiar-frecuencia`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cerrar una orden de carga
     * 
     * @param numOrden numOrden
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cerrarOrdenUsingPOST(numOrden: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public cerrarOrdenUsingPOST(numOrden: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public cerrarOrdenUsingPOST(numOrden: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public cerrarOrdenUsingPOST(numOrden: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (numOrden === null || numOrden === undefined) {
            throw new Error('Required parameter numOrden was null or undefined when calling cerrarOrdenUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<string>(`${this.basePath}/api/v1/ordenes-carga/cerrar/${encodeURIComponent(String(numOrden))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Crear orden de carga
     * 
     * @param ordenCarga ordenCarga
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public crearOrdenCargaUsingPOST(ordenCarga: OrdenDeCarga, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public crearOrdenCargaUsingPOST(ordenCarga: OrdenDeCarga, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public crearOrdenCargaUsingPOST(ordenCarga: OrdenDeCarga, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public crearOrdenCargaUsingPOST(ordenCarga: OrdenDeCarga, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ordenCarga === null || ordenCarga === undefined) {
            throw new Error('Required parameter ordenCarga was null or undefined when calling crearOrdenCargaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/api/v1/ordenes-carga`,
            ordenCarga,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listadoCamiones
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listadoCamionesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public listadoCamionesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public listadoCamionesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public listadoCamionesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/camiones`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listadoChoferes
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listadoChoferesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public listadoChoferesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public listadoChoferesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public listadoChoferesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/choferes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listadoClientes
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listadoClientesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public listadoClientesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public listadoClientesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public listadoClientesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/clientes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Listar órdenes de carga según el estado
     * 
     * @param i i
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listadoPorEstadoUsingGET(i: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public listadoPorEstadoUsingGET(i: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public listadoPorEstadoUsingGET(i: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public listadoPorEstadoUsingGET(i: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (i === null || i === undefined) {
            throw new Error('Required parameter i was null or undefined when calling listadoPorEstadoUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/v1/ordenes-carga/E${encodeURIComponent(String(i))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listadoProductos
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listadoProductosUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public listadoProductosUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public listadoProductosUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public listadoProductosUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/productos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Listado completo de las ordenes de carga en todos sus estados
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listadoUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public listadoUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public listadoUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public listadoUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/ordenes-carga`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Buscar orden de carga por número de orden
     * 
     * @param numOrden numOrden
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadByNumOrdenUsingGET(numOrden: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public loadByNumOrdenUsingGET(numOrden: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public loadByNumOrdenUsingGET(numOrden: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public loadByNumOrdenUsingGET(numOrden: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (numOrden === null || numOrden === undefined) {
            throw new Error('Required parameter numOrden was null or undefined when calling loadByNumOrdenUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/v1/ordenes-carga/numero-orden/${encodeURIComponent(String(numOrden))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cargar conciliación de orden de carga
     * 
     * @param numOrden numOrden
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadConciliacionUsingGET(numOrden: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public loadConciliacionUsingGET(numOrden: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public loadConciliacionUsingGET(numOrden: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public loadConciliacionUsingGET(numOrden: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (numOrden === null || numOrden === undefined) {
            throw new Error('Required parameter numOrden was null or undefined when calling loadConciliacionUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/v1/ordenes-carga/conciliacion/${encodeURIComponent(String(numOrden))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Buscar orden de carga por id
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public loadUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public loadUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public loadUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling loadUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/v1/ordenes-carga/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
